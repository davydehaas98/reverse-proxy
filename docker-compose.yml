version: "3.8"
services:
  reverse-proxy:
    image: traefik:v2.5
    container_name: reverse-proxy
    restart: unless-stopped
    cpus: 1
    mem_limit: 1G
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    security_opt:
      - no-new-privileges:true
    ports:
      - 80:80
      - 443:443
      - 8080:8080
    volumes:
      - $USER_DIR/rules:/rules
      # touch $USER_DIR/acme/acme.json
      # chmod 600 $USER_DIR/acme/acme.json
      - $USER_DIR/acme/acme.json:/acme.json
      - $USER_DIR/traefik.log:/traefik.log
      - $USER_DIR/shared:/shared
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command: # CLI arguments
      - --configFile=/rules/traefik.yml
      - --api.insecure=true
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=ERROR # (Default: ERROR) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAIN_NAME`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=reverse-proxy_default
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - diun.enable=true
      - diun.watch_repo=true
      - traefik.enable=true
      - traefik.http.routers.http-catchall.entrypoints=http
      - traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)
      - traefik.http.routers.http-catchall.middlewares=middlewares-https-redirectscheme@file
      - traefik.http.routers.traefik.middlewares=chain-oauth@file
      - traefik.http.routers.traefik.entrypoints=https
      - traefik.http.routers.traefik.rule=Host(`traefik.$DOMAIN_NAME`)
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=dns-cloudflare # Comment out this line after first run of traefik to force the use of wildcard certs
      - traefik.http.routers.traefik.tls.domains[0].main=$DOMAIN_NAME
      - traefik.http.routers.traefik.tls.domains[0].sans=*.$DOMAIN_NAME
      # - "traefik.http.routers.traefik.tls.domains[1].main=$DOMAIN_NAME_2" # Pulls main cert for second domain
      # - "traefik.http.routers.traefik.tls.domains[1].sans=*.$DOMAIN_NAME_2" # Pulls wildcard cert for second domain
    
  # Cloudflare DDNS - Dynamic DNS Updater
  cf-ddns:
    image: oznu/cloudflare-ddns:latest
    container_name: cf-ddns
    restart: unless-stopped
    environment:
      - API_KEY=$CLOUDFLARE_API_TOKEN
      - ZONE=$DOMAIN_NAME
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - diun.enable=true
      - diun.watch_repo=true
  # Cloudflare-Companion - Automatic CNAME DNS Creation
  cf-companion:
    image: tiredofit/traefik-cloudflare-companion:latest
    container_name: cf-companion
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TIMEZONE=$TZ
      - TRAEFIK_VERSION=2
      - CF_EMAIL=$CLOUDFLARE_EMAIL # Same as traefik
      # - CF_TOKEN=$CLOUDFLARE_API_TOKEN # Scoped api token not working. Error 10000.
      - CF_TOKEN=$CLOUDFLARE_API_KEY # Same as traefik
      - TARGET_DOMAIN=$DOMAIN_NAME
      - DOMAIN1=$DOMAIN_NAME
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONE_ID
      - DOMAIN1_PROXIED=TRUE
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - diun.enable=true
      - diun.watch_repo=true
      # Add hosts specified in rules here to force cf-companion to create the CNAMEs
      # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      - traefik.http.routers.cf-companion-rtr.rule=HostHeader(`pihole.$DOMAIN_NAME`,`hassio.$DOMAIN_NAME`)
  # Google OAuth - Single Sign On using OAuth 2.0 for Traefik 2.2
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    # image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAIN_NAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAIN_NAME
      - URL_PATH=/_oauth
      # - WHITELIST=$MY_EMAIL
      - WHITELIST=$CLOUDFLARE_EMAIL
      - LOG_LEVEL=warn
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    labels:
      - com.centurylinklabs.watchtower.enable=true
      - diun.enable=true
      - diun.watch_repo=true
      - traefik.enable=true
      ## HTTP Routers
      - traefik.http.routers.oauth.entrypoints=https
      - traefik.http.routers.oauth.rule=Host(`oauth.$DOMAIN_NAME`)
      - traefik.http.routers.oauth.tls=true
      ## Middlewares
      - traefik.http.routers.oauth.middlewares=chain-oauth@file
      ## HTTP Services
      - traefik.http.services.oauth.loadbalancer.server.port=4181
