networks:
  reverse-proxy:
    driver: bridge
    name: reverse-proxy

services:
  reverse-proxy:
    image: traefik:v3.2.2@sha256:990bbdb0a9174b0d441317a63188e41c63795380db42b36ed920543e27ce04c9
    container_name: reverse-proxy
    restart: unless-stopped
    cpus: 2
    mem_limit: 4096m
    # user: ${UID}:${GID}
    security_opt:
      - no-new-privileges:true
    ports:
      - 80:80
      - 443:443
      - 8080:8080
      - 3179:3179/tcp
      - 3179:3179/udp
    networks:
      - reverse-proxy
    volumes:
      - ${USER_DIR}/traefik/letsencrypt:/letsencrypt
      - ${USER_DIR}/traefik:/etc/traefik:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    command:
      - --certificatesResolver.dns-resolver-cloudflare.acme.email=${CLOUDFLARE_EMAIL}
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.${DOMAIN_NAME}`)
    environment:
      - TZ=${TZ}
      - CF_API_EMAIL=${CLOUDFLARE_EMAIL}
      - CF_API_KEY=${CLOUDFLARE_API_KEY}
    healthcheck:
      disable: true
      test: ["CMD", "curl", "--fail", "http://reverse-proxy:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
      start_interval: 5s
    labels:
      - diun.enable=true
      - traefik.enable=true
      - traefik.http.routers.traefik.entrypoints=websecure
      - traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)
      - traefik.http.routers.traefik.middlewares=chain-authelia@file
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.domains[0].main=${DOMAIN_NAME}
      - traefik.http.routers.traefik.tls.domains[0].sans=*.${DOMAIN_NAME}
      - traefik.http.services.traefik.loadbalancer.server.port=8080

  # Cloudflare DDNS - Dynamic DNS Updater
  cloudflare-ddns:
    image: oznu/cloudflare-ddns:latest@sha256:19bd73d8aea9641dc329ec18ae693b2b9c33ff7cdc007f368266ce584446f995
    container_name: cloudflare-ddns
    cpus: 0.1
    mem_limit: 128m
    # user: ${UID}:${GID}
    restart: unless-stopped
    networks:
      - reverse-proxy
    environment:
      - API_KEY=${CLOUDFLARE_API_TOKEN}
      - ZONE=${DOMAIN_NAME}
      - PROXIED=false
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1
    labels:
      - diun.enable=true
      
  # Cloudflare-Companion - Automatic CNAME DNS Creation
  cloudflare-companion:
    image: ghcr.io/tiredofit/docker-traefik-cloudflare-companion:7.3.3@sha256:20bfbde87b5a06a8935f05f7ae384e10c6694c2e25595065e488a25571a803b3
    container_name: cloudflare-companion
    cpus: 0.1
    mem_limit: 128m
    restart: unless-stopped
    # user: ${UID}:${GID}
    networks:
      - reverse-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=${TZ}
      - TRAEFIK_VERSION=2
      - CF_EMAIL=${CLOUDFLARE_EMAIL} # Same as traefik
      - CF_TOKEN=${CLOUDFLARE_API_KEY} # Same as traefik
      - DEFAULT_TTL=300
      - TARGET_DOMAIN=${DOMAIN_NAME}
      - DOMAIN1=${DOMAIN_NAME}
      - DOMAIN1_ZONE_ID=${CLOUDFLARE_ZONE_ID}
      - DOMAIN1_PROXIED=true
    labels:
      - diun.enable=true
      # Add hosts specified in rules here to force cloudflare-companion to create the CNAMEs
      # Since cloudflare-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
    #   - traefik.http.routers.cloudflare-companion.rule=Host(`pihole.${DOMAIN_NAME}`) || Host(`hassio.${DOMAIN_NAME}`)
    # networks:
    #   - reverse-proxy
      
  # Authelia - IAM
  authelia:
    image: ghcr.io/authelia/authelia:4.38.17@sha256:bd0b56ab682ecdf994cc66bbbf75e3ab437a3e4aea4c707eeea0c2fca6cf945e
    container_name: authelia
    cpus: 4
    mem_limit: 8192m
    user: ${UID}:${GID}
    security_opt:
      - no-new-privileges:true
    restart: unless-stopped
    expose:
      - 9091
    networks:
      - reverse-proxy
    volumes:
      - ${USER_DIR}/authelia:/config
    environment:
      - TZ=${TZ}
    healthcheck:
      disable: true
      test: ["CMD", "curl", "--fail", "http://authelia:9091/api/state"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
      start_interval: 5s
    labels:
      - diun.enable=true
      - traefik.enable=true
      - traefik.http.routers.authelia.entrypoints=websecure
      - traefik.http.routers.authelia.rule=Host(`authelia.${DOMAIN_NAME}`)
      - traefik.http.routers.authelia.middlewares=chain-no-auth@file
      - traefik.http.services.authelia.loadbalancer.server.port=9091
